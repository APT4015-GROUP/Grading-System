name: Deploy Spring Boot to Render

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - production

jobs:
  # build-and-deploy:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      SPRING_PROFILES_ACTIVE: test  # Ensures application-test.properties is used
      TESTDB_URL: jdbc:tc:mysql:8.0:///testdb
      TESTDB_USERNAME: root
      TESTDB_PASSWORD: chip1852
      COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      COHERE_API_MODEL: command-r-plus
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: admin
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      PORT: 8080

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      # - name: Build with Gradle
      #   run: ./gradlew bootJar

      - name: Run Unit Tests
        run: ./gradlew test

      - name: Run API Integration Tests with Testcontainers
        run: ./gradlew apiTest

      # - name: Run UI Tests (Selenium)
      #   run: ./gradlew seleniumTest

      # - name: Run Performance Tests
      #   run: ./gradlew performanceTest

  build-docker:
    needs: test  # Only run if tests pass
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t grading-system .
      - name: Check Deployment Health
        run: |
          sleep 20  # Give the server some time to start
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://grading-system-te3s.onrender.com/health)
          if [ "$STATUS" -ne 200 ]; then exit 1; fi